# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from piksi_rtk_msgs/UartState_V2_3_15.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UartState_V2_3_15(genpy.Message):
  _md5sum = "eab7c26cb7da9615284c0c7450fdcec3"
  _type = "piksi_rtk_msgs/UartState_V2_3_15"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# The UART message reports data latency and throughput of the UART channels providing SBP I/O.

# Message definition based on libsbp v2.3.15, only some field were selected for the original SBP message (same ones
# used in piksi_tools/console/system_monitor_view.py, function "uart_state_callback").

Header header

int32 latency_avg               # Average latency [ms].
int32 latency_lmin              # Minimum latency [ms].
int32 latency_lmax              # Maximum latency [ms].
int32 latency_current           # Smoothed estimate of the current latency [ms].
int32 obs_period_avg            # Average period [ms].
int32 obs_period_pmin           # Minimum period [ms].
int32 obs_period_pmax           # Maximum period [ms].
int32 obs_period_current        # Smoothed estimate of the current preiod [ms].

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','latency_avg','latency_lmin','latency_lmax','latency_current','obs_period_avg','obs_period_pmin','obs_period_pmax','obs_period_current']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,latency_avg,latency_lmin,latency_lmax,latency_current,obs_period_avg,obs_period_pmin,obs_period_pmax,obs_period_current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UartState_V2_3_15, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.latency_avg is None:
        self.latency_avg = 0
      if self.latency_lmin is None:
        self.latency_lmin = 0
      if self.latency_lmax is None:
        self.latency_lmax = 0
      if self.latency_current is None:
        self.latency_current = 0
      if self.obs_period_avg is None:
        self.obs_period_avg = 0
      if self.obs_period_pmin is None:
        self.obs_period_pmin = 0
      if self.obs_period_pmax is None:
        self.obs_period_pmax = 0
      if self.obs_period_current is None:
        self.obs_period_current = 0
    else:
      self.header = std_msgs.msg.Header()
      self.latency_avg = 0
      self.latency_lmin = 0
      self.latency_lmax = 0
      self.latency_current = 0
      self.obs_period_avg = 0
      self.obs_period_pmin = 0
      self.obs_period_pmax = 0
      self.obs_period_current = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8i().pack(_x.latency_avg, _x.latency_lmin, _x.latency_lmax, _x.latency_current, _x.obs_period_avg, _x.obs_period_pmin, _x.obs_period_pmax, _x.obs_period_current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.latency_avg, _x.latency_lmin, _x.latency_lmax, _x.latency_current, _x.obs_period_avg, _x.obs_period_pmin, _x.obs_period_pmax, _x.obs_period_current,) = _get_struct_8i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8i().pack(_x.latency_avg, _x.latency_lmin, _x.latency_lmax, _x.latency_current, _x.obs_period_avg, _x.obs_period_pmin, _x.obs_period_pmax, _x.obs_period_current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.latency_avg, _x.latency_lmin, _x.latency_lmax, _x.latency_current, _x.obs_period_avg, _x.obs_period_pmin, _x.obs_period_pmax, _x.obs_period_current,) = _get_struct_8i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8i = None
def _get_struct_8i():
    global _struct_8i
    if _struct_8i is None:
        _struct_8i = struct.Struct("<8i")
    return _struct_8i
