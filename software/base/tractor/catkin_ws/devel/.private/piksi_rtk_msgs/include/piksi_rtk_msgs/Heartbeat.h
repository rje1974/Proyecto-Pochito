// Generated by gencpp from file piksi_rtk_msgs/Heartbeat.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_HEARTBEAT_H
#define PIKSI_RTK_MSGS_MESSAGE_HEARTBEAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct Heartbeat_
{
  typedef Heartbeat_<ContainerAllocator> Type;

  Heartbeat_()
    : header()
    , system_error(0)
    , io_error(0)
    , swift_nap_error(0)
    , sbp_minor_version(0)
    , sbp_major_version(0)
    , external_antenna_present(0)  {
    }
  Heartbeat_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , system_error(0)
    , io_error(0)
    , swift_nap_error(0)
    , sbp_minor_version(0)
    , sbp_major_version(0)
    , external_antenna_present(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _system_error_type;
  _system_error_type system_error;

   typedef uint8_t _io_error_type;
  _io_error_type io_error;

   typedef uint8_t _swift_nap_error_type;
  _swift_nap_error_type swift_nap_error;

   typedef uint8_t _sbp_minor_version_type;
  _sbp_minor_version_type sbp_minor_version;

   typedef uint8_t _sbp_major_version_type;
  _sbp_major_version_type sbp_major_version;

   typedef uint8_t _external_antenna_present_type;
  _external_antenna_present_type external_antenna_present;





  typedef boost::shared_ptr< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> const> ConstPtr;

}; // struct Heartbeat_

typedef ::piksi_rtk_msgs::Heartbeat_<std::allocator<void> > Heartbeat;

typedef boost::shared_ptr< ::piksi_rtk_msgs::Heartbeat > HeartbeatPtr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::Heartbeat const> HeartbeatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_rtk_msgs': ['/root/catkin_ws/src/ethz_piksi_ros/piksi_rtk_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f302769a534aa6ff5a3f6b1f1c11f4bc";
  }

  static const char* value(const ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf302769a534aa6ffULL;
  static const uint64_t static_value2 = 0x5a3f6b1f1c11f4bcULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/Heartbeat";
  }

  static const char* value(const ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The heartbeat message is sent periodically to inform the host or other attached devices that the system\n\
# is running. It is used to monitor system malfunctions. It also contains status flags that indicate to the\n\
# host the status of the system and whether it is operating correctly. Currently, the expected heartbeat\n\
# interval is 1 sec.\n\
# The system error flag is used to indicate that an error has occurred in the system. To determine the\n\
# source of the error, the remaining error flags should be inspected.\n\
\n\
Header header\n\
\n\
uint8 system_error              # System Error Flag.\n\
uint8 io_error                  # IO Error Flag.\n\
uint8 swift_nap_error           # SwiftNAP Error Flag.\n\
uint8 sbp_minor_version         # SBP Minor Protocol Version Number.\n\
uint8 sbp_major_version         # SBP Major Protocol Version Number.\n\
uint8 external_antenna_present  # External Antenna Present Flag.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.system_error);
      stream.next(m.io_error);
      stream.next(m.swift_nap_error);
      stream.next(m.sbp_minor_version);
      stream.next(m.sbp_major_version);
      stream.next(m.external_antenna_present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Heartbeat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::Heartbeat_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "system_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_error);
    s << indent << "io_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.io_error);
    s << indent << "swift_nap_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swift_nap_error);
    s << indent << "sbp_minor_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sbp_minor_version);
    s << indent << "sbp_major_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sbp_major_version);
    s << indent << "external_antenna_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_antenna_present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_HEARTBEAT_H
