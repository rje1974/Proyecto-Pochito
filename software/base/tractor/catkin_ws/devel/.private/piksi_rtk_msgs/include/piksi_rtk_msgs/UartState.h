// Generated by gencpp from file piksi_rtk_msgs/UartState.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_UARTSTATE_H
#define PIKSI_RTK_MSGS_MESSAGE_UARTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct UartState_
{
  typedef UartState_<ContainerAllocator> Type;

  UartState_()
    : header()
    , uart_a_tx_throughput(0.0)
    , uart_a_rx_throughput(0.0)
    , uart_a_crc_error_count(0)
    , uart_a_io_error_count(0)
    , uart_a_tx_buffer_level(0)
    , uart_a_rx_buffer_level(0)
    , uart_b_tx_throughput(0.0)
    , uart_b_rx_throughput(0.0)
    , uart_b_crc_error_count(0)
    , uart_b_io_error_count(0)
    , uart_b_tx_buffer_level(0)
    , uart_b_rx_buffer_level(0)
    , uart_ftdi_tx_throughput(0.0)
    , uart_ftdi_rx_throughput(0.0)
    , uart_ftdi_crc_error_count(0)
    , uart_ftdi_io_error_count(0)
    , uart_ftdi_tx_buffer_level(0)
    , uart_ftdi_rx_buffer_level(0)
    , latency_avg(0)
    , latency_lmin(0)
    , latency_lmax(0)
    , latency_current(0)
    , obs_period_avg(0)
    , obs_period_pmin(0)
    , obs_period_pmax(0)
    , obs_period_current(0)  {
    }
  UartState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uart_a_tx_throughput(0.0)
    , uart_a_rx_throughput(0.0)
    , uart_a_crc_error_count(0)
    , uart_a_io_error_count(0)
    , uart_a_tx_buffer_level(0)
    , uart_a_rx_buffer_level(0)
    , uart_b_tx_throughput(0.0)
    , uart_b_rx_throughput(0.0)
    , uart_b_crc_error_count(0)
    , uart_b_io_error_count(0)
    , uart_b_tx_buffer_level(0)
    , uart_b_rx_buffer_level(0)
    , uart_ftdi_tx_throughput(0.0)
    , uart_ftdi_rx_throughput(0.0)
    , uart_ftdi_crc_error_count(0)
    , uart_ftdi_io_error_count(0)
    , uart_ftdi_tx_buffer_level(0)
    , uart_ftdi_rx_buffer_level(0)
    , latency_avg(0)
    , latency_lmin(0)
    , latency_lmax(0)
    , latency_current(0)
    , obs_period_avg(0)
    , obs_period_pmin(0)
    , obs_period_pmax(0)
    , obs_period_current(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _uart_a_tx_throughput_type;
  _uart_a_tx_throughput_type uart_a_tx_throughput;

   typedef double _uart_a_rx_throughput_type;
  _uart_a_rx_throughput_type uart_a_rx_throughput;

   typedef uint16_t _uart_a_crc_error_count_type;
  _uart_a_crc_error_count_type uart_a_crc_error_count;

   typedef uint16_t _uart_a_io_error_count_type;
  _uart_a_io_error_count_type uart_a_io_error_count;

   typedef uint8_t _uart_a_tx_buffer_level_type;
  _uart_a_tx_buffer_level_type uart_a_tx_buffer_level;

   typedef uint8_t _uart_a_rx_buffer_level_type;
  _uart_a_rx_buffer_level_type uart_a_rx_buffer_level;

   typedef double _uart_b_tx_throughput_type;
  _uart_b_tx_throughput_type uart_b_tx_throughput;

   typedef double _uart_b_rx_throughput_type;
  _uart_b_rx_throughput_type uart_b_rx_throughput;

   typedef uint16_t _uart_b_crc_error_count_type;
  _uart_b_crc_error_count_type uart_b_crc_error_count;

   typedef uint16_t _uart_b_io_error_count_type;
  _uart_b_io_error_count_type uart_b_io_error_count;

   typedef uint8_t _uart_b_tx_buffer_level_type;
  _uart_b_tx_buffer_level_type uart_b_tx_buffer_level;

   typedef uint8_t _uart_b_rx_buffer_level_type;
  _uart_b_rx_buffer_level_type uart_b_rx_buffer_level;

   typedef double _uart_ftdi_tx_throughput_type;
  _uart_ftdi_tx_throughput_type uart_ftdi_tx_throughput;

   typedef double _uart_ftdi_rx_throughput_type;
  _uart_ftdi_rx_throughput_type uart_ftdi_rx_throughput;

   typedef uint16_t _uart_ftdi_crc_error_count_type;
  _uart_ftdi_crc_error_count_type uart_ftdi_crc_error_count;

   typedef uint16_t _uart_ftdi_io_error_count_type;
  _uart_ftdi_io_error_count_type uart_ftdi_io_error_count;

   typedef uint8_t _uart_ftdi_tx_buffer_level_type;
  _uart_ftdi_tx_buffer_level_type uart_ftdi_tx_buffer_level;

   typedef uint8_t _uart_ftdi_rx_buffer_level_type;
  _uart_ftdi_rx_buffer_level_type uart_ftdi_rx_buffer_level;

   typedef int32_t _latency_avg_type;
  _latency_avg_type latency_avg;

   typedef int32_t _latency_lmin_type;
  _latency_lmin_type latency_lmin;

   typedef int32_t _latency_lmax_type;
  _latency_lmax_type latency_lmax;

   typedef int32_t _latency_current_type;
  _latency_current_type latency_current;

   typedef int32_t _obs_period_avg_type;
  _obs_period_avg_type obs_period_avg;

   typedef int32_t _obs_period_pmin_type;
  _obs_period_pmin_type obs_period_pmin;

   typedef int32_t _obs_period_pmax_type;
  _obs_period_pmax_type obs_period_pmax;

   typedef int32_t _obs_period_current_type;
  _obs_period_current_type obs_period_current;





  typedef boost::shared_ptr< ::piksi_rtk_msgs::UartState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::UartState_<ContainerAllocator> const> ConstPtr;

}; // struct UartState_

typedef ::piksi_rtk_msgs::UartState_<std::allocator<void> > UartState;

typedef boost::shared_ptr< ::piksi_rtk_msgs::UartState > UartStatePtr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::UartState const> UartStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::UartState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_rtk_msgs': ['/root/catkin_ws/src/ethz_piksi_ros/piksi_rtk_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::UartState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::UartState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::UartState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8a9b74f69bcd0dbe0830dfb13841e63";
  }

  static const char* value(const ::piksi_rtk_msgs::UartState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8a9b74f69bcd0dbULL;
  static const uint64_t static_value2 = 0xe0830dfb13841e63ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/UartState";
  }

  static const char* value(const ::piksi_rtk_msgs::UartState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The UART message reports data latency and throughput of the UART channels providing SBP I/O.\n\
# On the default Piksi configuration, UARTs A and B are used for telemetry radios, but can also be host\n\
# access ports for embedded hosts, or other interfaces in future. The reported percentage values must\n\
# be normalized. Observations latency and period can be used to assess the health of the differential\n\
# corrections link. Latency provides the timeliness of received base observations while the period indicates\n\
# their likelihood of transmission.\n\
\n\
Header header\n\
\n\
float64 uart_a_tx_throughput      # UART transmit throughput [kB/s].\n\
float64 uart_a_rx_throughput      # UART transmit throughput [kB/s].\n\
uint16 uart_a_crc_error_count     # UART CRC error count.\n\
uint16 uart_a_io_error_count      # UART IO error count.\n\
uint8 uart_a_tx_buffer_level      # UART transmit buffer percentage utilization (ranges from 0 to 255).\n\
uint8 uart_a_rx_buffer_level      # UART transmit buffer percentage utilization (ranges from 0 to 255).\n\
\n\
float64 uart_b_tx_throughput      # UART transmit throughput [kB/s].\n\
float64 uart_b_rx_throughput      # UART transmit throughput [kB/s].\n\
uint16 uart_b_crc_error_count     # UART CRC error count.\n\
uint16 uart_b_io_error_count      # UART IO error count.\n\
uint8 uart_b_tx_buffer_level      # UART transmit buffer percentage utilization (ranges from 0 to 255).\n\
uint8 uart_b_rx_buffer_level      # UART transmit buffer percentage utilization (ranges from 0 to 255).\n\
\n\
float64 uart_ftdi_tx_throughput   # UART transmit throughput [kB/s].\n\
float64 uart_ftdi_rx_throughput   # UART receive throughput [kB/s].\n\
uint16 uart_ftdi_crc_error_count  # UART CRC error count.\n\
uint16 uart_ftdi_io_error_count   # UART IO error count.\n\
uint8 uart_ftdi_tx_buffer_level   # UART transmit buffer percentage utilization (ranges from 0 to 255).\n\
uint8 uart_ftdi_rx_buffer_level   # UART receive buffer percentage utilization (ranges from 0 to 255).\n\
\n\
int32 latency_avg                 # Average latency [ms].\n\
int32 latency_lmin                # Minimum latency [ms].\n\
int32 latency_lmax                # Maximum latency [ms].\n\
int32 latency_current             # Smoothed estimate of the current latency [ms].\n\
\n\
int32 obs_period_avg              # Average period [ms].\n\
int32 obs_period_pmin             # Minimum period [ms].\n\
int32 obs_period_pmax             # Maximum period [ms].\n\
int32 obs_period_current          # Smoothed estimate of the current period [ms].\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::piksi_rtk_msgs::UartState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uart_a_tx_throughput);
      stream.next(m.uart_a_rx_throughput);
      stream.next(m.uart_a_crc_error_count);
      stream.next(m.uart_a_io_error_count);
      stream.next(m.uart_a_tx_buffer_level);
      stream.next(m.uart_a_rx_buffer_level);
      stream.next(m.uart_b_tx_throughput);
      stream.next(m.uart_b_rx_throughput);
      stream.next(m.uart_b_crc_error_count);
      stream.next(m.uart_b_io_error_count);
      stream.next(m.uart_b_tx_buffer_level);
      stream.next(m.uart_b_rx_buffer_level);
      stream.next(m.uart_ftdi_tx_throughput);
      stream.next(m.uart_ftdi_rx_throughput);
      stream.next(m.uart_ftdi_crc_error_count);
      stream.next(m.uart_ftdi_io_error_count);
      stream.next(m.uart_ftdi_tx_buffer_level);
      stream.next(m.uart_ftdi_rx_buffer_level);
      stream.next(m.latency_avg);
      stream.next(m.latency_lmin);
      stream.next(m.latency_lmax);
      stream.next(m.latency_current);
      stream.next(m.obs_period_avg);
      stream.next(m.obs_period_pmin);
      stream.next(m.obs_period_pmax);
      stream.next(m.obs_period_current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UartState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::UartState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::UartState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uart_a_tx_throughput: ";
    Printer<double>::stream(s, indent + "  ", v.uart_a_tx_throughput);
    s << indent << "uart_a_rx_throughput: ";
    Printer<double>::stream(s, indent + "  ", v.uart_a_rx_throughput);
    s << indent << "uart_a_crc_error_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uart_a_crc_error_count);
    s << indent << "uart_a_io_error_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uart_a_io_error_count);
    s << indent << "uart_a_tx_buffer_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uart_a_tx_buffer_level);
    s << indent << "uart_a_rx_buffer_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uart_a_rx_buffer_level);
    s << indent << "uart_b_tx_throughput: ";
    Printer<double>::stream(s, indent + "  ", v.uart_b_tx_throughput);
    s << indent << "uart_b_rx_throughput: ";
    Printer<double>::stream(s, indent + "  ", v.uart_b_rx_throughput);
    s << indent << "uart_b_crc_error_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uart_b_crc_error_count);
    s << indent << "uart_b_io_error_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uart_b_io_error_count);
    s << indent << "uart_b_tx_buffer_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uart_b_tx_buffer_level);
    s << indent << "uart_b_rx_buffer_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uart_b_rx_buffer_level);
    s << indent << "uart_ftdi_tx_throughput: ";
    Printer<double>::stream(s, indent + "  ", v.uart_ftdi_tx_throughput);
    s << indent << "uart_ftdi_rx_throughput: ";
    Printer<double>::stream(s, indent + "  ", v.uart_ftdi_rx_throughput);
    s << indent << "uart_ftdi_crc_error_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uart_ftdi_crc_error_count);
    s << indent << "uart_ftdi_io_error_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uart_ftdi_io_error_count);
    s << indent << "uart_ftdi_tx_buffer_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uart_ftdi_tx_buffer_level);
    s << indent << "uart_ftdi_rx_buffer_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uart_ftdi_rx_buffer_level);
    s << indent << "latency_avg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latency_avg);
    s << indent << "latency_lmin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latency_lmin);
    s << indent << "latency_lmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latency_lmax);
    s << indent << "latency_current: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latency_current);
    s << indent << "obs_period_avg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs_period_avg);
    s << indent << "obs_period_pmin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs_period_pmin);
    s << indent << "obs_period_pmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs_period_pmax);
    s << indent << "obs_period_current: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs_period_current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_UARTSTATE_H
