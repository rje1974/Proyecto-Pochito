// Generated by gencpp from file piksi_rtk_msgs/ReceiverState.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_RECEIVERSTATE_H
#define PIKSI_RTK_MSGS_MESSAGE_RECEIVERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct ReceiverState_
{
  typedef ReceiverState_<ContainerAllocator> Type;

  ReceiverState_()
    : header()
    , num_sat(0)
    , rtk_mode_fix(false)
    , sat()
    , cn0()
    , tracking_running()
    , system_error(0)
    , io_error(0)
    , swift_nap_error(0)
    , external_antenna_present(0)  {
    }
  ReceiverState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_sat(0)
    , rtk_mode_fix(false)
    , sat(_alloc)
    , cn0(_alloc)
    , tracking_running(_alloc)
    , system_error(0)
    , io_error(0)
    , swift_nap_error(0)
    , external_antenna_present(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _num_sat_type;
  _num_sat_type num_sat;

   typedef uint8_t _rtk_mode_fix_type;
  _rtk_mode_fix_type rtk_mode_fix;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _sat_type;
  _sat_type sat;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cn0_type;
  _cn0_type cn0;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _tracking_running_type;
  _tracking_running_type tracking_running;

   typedef uint8_t _system_error_type;
  _system_error_type system_error;

   typedef uint8_t _io_error_type;
  _io_error_type io_error;

   typedef uint8_t _swift_nap_error_type;
  _swift_nap_error_type swift_nap_error;

   typedef uint8_t _external_antenna_present_type;
  _external_antenna_present_type external_antenna_present;





  typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> const> ConstPtr;

}; // struct ReceiverState_

typedef ::piksi_rtk_msgs::ReceiverState_<std::allocator<void> > ReceiverState;

typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState > ReceiverStatePtr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState const> ReceiverStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_rtk_msgs': ['/root/catkin_ws/src/ethz_piksi_ros/piksi_rtk_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bca929a4e134714778225bff42f183c";
  }

  static const char* value(const ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bca929a4e134714ULL;
  static const uint64_t static_value2 = 0x778225bff42f183cULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/ReceiverState";
  }

  static const char* value(const ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Miscellaneous information form different SBP messages\n\
\n\
Header header\n\
\n\
uint8 num_sat                   # Number of satellites.\n\
bool rtk_mode_fix 	            # 1 = Fixed, 0 = Float.\n\
uint16[] sat                    # Constellation-specific satellite identifier.\n\
float32[] cn0                   # Carrier-to-noise density.\n\
uint8[] tracking_running        # Status of tracking channel.\n\
uint8 system_error              # System Error Flag.\n\
uint8 io_error                  # IO Error Flag.\n\
uint8 swift_nap_error           # SwiftNAP Error Flag.\n\
uint8 external_antenna_present  # External Antenna Present Flag.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_sat);
      stream.next(m.rtk_mode_fix);
      stream.next(m.sat);
      stream.next(m.cn0);
      stream.next(m.tracking_running);
      stream.next(m.system_error);
      stream.next(m.io_error);
      stream.next(m.swift_nap_error);
      stream.next(m.external_antenna_present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReceiverState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::ReceiverState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sat);
    s << indent << "rtk_mode_fix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rtk_mode_fix);
    s << indent << "sat[]" << std::endl;
    for (size_t i = 0; i < v.sat.size(); ++i)
    {
      s << indent << "  sat[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.sat[i]);
    }
    s << indent << "cn0[]" << std::endl;
    for (size_t i = 0; i < v.cn0.size(); ++i)
    {
      s << indent << "  cn0[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cn0[i]);
    }
    s << indent << "tracking_running[]" << std::endl;
    for (size_t i = 0; i < v.tracking_running.size(); ++i)
    {
      s << indent << "  tracking_running[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.tracking_running[i]);
    }
    s << indent << "system_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_error);
    s << indent << "io_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.io_error);
    s << indent << "swift_nap_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swift_nap_error);
    s << indent << "external_antenna_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_antenna_present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_RECEIVERSTATE_H
