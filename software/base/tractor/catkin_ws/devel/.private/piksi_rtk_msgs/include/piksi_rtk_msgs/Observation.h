// Generated by gencpp from file piksi_rtk_msgs/Observation.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_OBSERVATION_H
#define PIKSI_RTK_MSGS_MESSAGE_OBSERVATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct Observation_
{
  typedef Observation_<ContainerAllocator> Type;

  Observation_()
    : header()
    , tow(0)
    , ns_residual(0)
    , wn(0)
    , n_obs(0)
    , P()
    , L_i()
    , L_f()
    , D_i()
    , D_f()
    , cn0()
    , lock()
    , flags()
    , sid_sat()
    , sid_code()  {
    }
  Observation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tow(0)
    , ns_residual(0)
    , wn(0)
    , n_obs(0)
    , P(_alloc)
    , L_i(_alloc)
    , L_f(_alloc)
    , D_i(_alloc)
    , D_f(_alloc)
    , cn0(_alloc)
    , lock(_alloc)
    , flags(_alloc)
    , sid_sat(_alloc)
    , sid_code(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _tow_type;
  _tow_type tow;

   typedef int32_t _ns_residual_type;
  _ns_residual_type ns_residual;

   typedef uint16_t _wn_type;
  _wn_type wn;

   typedef uint8_t _n_obs_type;
  _n_obs_type n_obs;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _P_type;
  _P_type P;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _L_i_type;
  _L_i_type L_i;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _L_f_type;
  _L_f_type L_f;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _D_i_type;
  _D_i_type D_i;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _D_f_type;
  _D_f_type D_f;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _cn0_type;
  _cn0_type cn0;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _lock_type;
  _lock_type lock;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _flags_type;
  _flags_type flags;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _sid_sat_type;
  _sid_sat_type sid_sat;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _sid_code_type;
  _sid_code_type sid_code;





  typedef boost::shared_ptr< ::piksi_rtk_msgs::Observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::Observation_<ContainerAllocator> const> ConstPtr;

}; // struct Observation_

typedef ::piksi_rtk_msgs::Observation_<std::allocator<void> > Observation;

typedef boost::shared_ptr< ::piksi_rtk_msgs::Observation > ObservationPtr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::Observation const> ObservationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::Observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_rtk_msgs': ['/root/catkin_ws/src/ethz_piksi_ros/piksi_rtk_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::Observation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::Observation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fb93688b90e872c3a77668a53e5ecc9";
  }

  static const char* value(const ::piksi_rtk_msgs::Observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fb93688b90e872cULL;
  static const uint64_t static_value2 = 0x3a77668a53e5ecc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/Observation";
  }

  static const char* value(const ::piksi_rtk_msgs::Observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Satellite observation messages from the device.\n\
\n\
Header header\n\
\n\
uint32 tow                  # Milliseconds since start of GPS week.\n\
int32  ns_residual          # Nanosecond residual of millisecond-rounded TOW (ranges from -500000 to 500000).\n\
uint16 wn                   # GPS week number.\n\
uint8  n_obs                # Total number of observations.\n\
                            # First nibble is the size of the sequence (n), second nibble is the zero-indexed counter (ith packet of n).\n\
\n\
uint32[] P                  # Pseudorange observation.\n\
int32[]  L_i                # Carrier phase whole cycles.\n\
uint8[]  L_f                # Carrier phase fractional part.\n\
int16[]  D_i                # Doppler whole Hz.\n\
uint8[]  D_f                # Doppler fractional part.\n\
uint8[]  cn0                # Carrier-to-Noise density. Zero implies invalid cn0.\n\
\n\
uint8[]  lock               # Lock timer.\n\
uint8[]  flags              # Measurement status flags.\n\
uint8[]  sid_sat            # Constellation-specific satellite identifier.\n\
uint8[]  sid_code           # Signal constellation, band and code.\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::piksi_rtk_msgs::Observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tow);
      stream.next(m.ns_residual);
      stream.next(m.wn);
      stream.next(m.n_obs);
      stream.next(m.P);
      stream.next(m.L_i);
      stream.next(m.L_f);
      stream.next(m.D_i);
      stream.next(m.D_f);
      stream.next(m.cn0);
      stream.next(m.lock);
      stream.next(m.flags);
      stream.next(m.sid_sat);
      stream.next(m.sid_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::Observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::Observation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tow: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tow);
    s << indent << "ns_residual: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ns_residual);
    s << indent << "wn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wn);
    s << indent << "n_obs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_obs);
    s << indent << "P[]" << std::endl;
    for (size_t i = 0; i < v.P.size(); ++i)
    {
      s << indent << "  P[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.P[i]);
    }
    s << indent << "L_i[]" << std::endl;
    for (size_t i = 0; i < v.L_i.size(); ++i)
    {
      s << indent << "  L_i[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.L_i[i]);
    }
    s << indent << "L_f[]" << std::endl;
    for (size_t i = 0; i < v.L_f.size(); ++i)
    {
      s << indent << "  L_f[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.L_f[i]);
    }
    s << indent << "D_i[]" << std::endl;
    for (size_t i = 0; i < v.D_i.size(); ++i)
    {
      s << indent << "  D_i[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.D_i[i]);
    }
    s << indent << "D_f[]" << std::endl;
    for (size_t i = 0; i < v.D_f.size(); ++i)
    {
      s << indent << "  D_f[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.D_f[i]);
    }
    s << indent << "cn0[]" << std::endl;
    for (size_t i = 0; i < v.cn0.size(); ++i)
    {
      s << indent << "  cn0[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cn0[i]);
    }
    s << indent << "lock[]" << std::endl;
    for (size_t i = 0; i < v.lock.size(); ++i)
    {
      s << indent << "  lock[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.lock[i]);
    }
    s << indent << "flags[]" << std::endl;
    for (size_t i = 0; i < v.flags.size(); ++i)
    {
      s << indent << "  flags[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.flags[i]);
    }
    s << indent << "sid_sat[]" << std::endl;
    for (size_t i = 0; i < v.sid_sat.size(); ++i)
    {
      s << indent << "  sid_sat[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.sid_sat[i]);
    }
    s << indent << "sid_code[]" << std::endl;
    for (size_t i = 0; i < v.sid_code.size(); ++i)
    {
      s << indent << "  sid_code[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.sid_code[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_OBSERVATION_H
